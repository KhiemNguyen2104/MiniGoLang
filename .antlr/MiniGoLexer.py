# Generated from d:/Educational_program/242/CO3005-Principles of Programming Languages/Project/CO3005-Principles of Programming Languages/Assignment-4/assignment4/initial/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,64,488,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,1,1,1,3,1,144,8,
        1,1,1,4,1,147,8,1,11,1,12,1,148,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,
        3,4,159,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
        30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,
        34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,
        39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,
        44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,
        51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,
        55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,5,56,355,8,56,10,56,12,
        56,358,9,56,3,56,360,8,56,1,57,1,57,1,57,1,57,3,57,366,8,57,1,57,
        4,57,369,8,57,11,57,12,57,370,1,58,1,58,1,58,1,58,3,58,377,8,58,
        1,58,4,58,380,8,58,11,58,12,58,381,1,59,1,59,1,59,1,59,3,59,388,
        8,59,1,59,4,59,391,8,59,11,59,12,59,392,1,60,1,60,1,60,5,60,398,
        8,60,10,60,12,60,401,9,60,3,60,403,8,60,1,60,1,60,5,60,407,8,60,
        10,60,12,60,410,9,60,1,60,3,60,413,8,60,1,61,1,61,1,61,5,61,418,
        8,61,10,61,12,61,421,9,61,1,61,1,61,1,61,1,62,4,62,427,8,62,11,62,
        12,62,428,1,62,5,62,432,8,62,10,62,12,62,435,9,62,1,63,4,63,438,
        8,63,11,63,12,63,439,1,63,1,63,1,64,4,64,445,8,64,11,64,12,64,446,
        1,64,1,64,1,65,1,65,1,65,1,65,5,65,455,8,65,10,65,12,65,458,9,65,
        1,65,1,65,1,66,1,66,1,66,1,66,5,66,466,8,66,10,66,12,66,469,9,66,
        1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,5,67,479,8,67,10,67,12,67,
        482,9,67,1,67,3,67,485,8,67,1,68,1,68,1,467,0,69,1,0,3,0,5,0,7,0,
        9,0,11,1,13,2,15,3,17,4,19,5,21,6,23,7,25,8,27,9,29,10,31,11,33,
        12,35,13,37,14,39,15,41,16,43,17,45,18,47,19,49,20,51,21,53,22,55,
        23,57,24,59,25,61,26,63,27,65,28,67,29,69,30,71,31,73,32,75,33,77,
        34,79,35,81,36,83,37,85,38,87,39,89,40,91,41,93,42,95,43,97,44,99,
        45,101,46,103,47,105,48,107,49,109,50,111,51,113,52,115,53,117,54,
        119,55,121,56,123,57,125,58,127,59,129,60,131,61,133,62,135,63,137,
        64,1,0,13,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,
        13,13,34,34,92,92,1,0,49,57,1,0,48,49,1,0,48,55,3,0,48,57,65,70,
        97,102,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,
        10,13,13,2,0,9,9,32,32,2,1,10,10,13,13,508,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
        113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,
        0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,
        1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,139,1,0,0,0,
        3,141,1,0,0,0,5,150,1,0,0,0,7,153,1,0,0,0,9,158,1,0,0,0,11,160,1,
        0,0,0,13,164,1,0,0,0,15,170,1,0,0,0,17,177,1,0,0,0,19,185,1,0,0,
        0,21,191,1,0,0,0,23,195,1,0,0,0,25,202,1,0,0,0,27,207,1,0,0,0,29,
        212,1,0,0,0,31,219,1,0,0,0,33,229,1,0,0,0,35,232,1,0,0,0,37,237,
        1,0,0,0,39,241,1,0,0,0,41,250,1,0,0,0,43,256,1,0,0,0,45,262,1,0,
        0,0,47,264,1,0,0,0,49,266,1,0,0,0,51,268,1,0,0,0,53,270,1,0,0,0,
        55,272,1,0,0,0,57,275,1,0,0,0,59,278,1,0,0,0,61,280,1,0,0,0,63,283,
        1,0,0,0,65,285,1,0,0,0,67,288,1,0,0,0,69,291,1,0,0,0,71,294,1,0,
        0,0,73,296,1,0,0,0,75,298,1,0,0,0,77,301,1,0,0,0,79,304,1,0,0,0,
        81,307,1,0,0,0,83,310,1,0,0,0,85,313,1,0,0,0,87,316,1,0,0,0,89,318,
        1,0,0,0,91,320,1,0,0,0,93,322,1,0,0,0,95,324,1,0,0,0,97,326,1,0,
        0,0,99,328,1,0,0,0,101,330,1,0,0,0,103,332,1,0,0,0,105,334,1,0,0,
        0,107,336,1,0,0,0,109,340,1,0,0,0,111,345,1,0,0,0,113,359,1,0,0,
        0,115,365,1,0,0,0,117,376,1,0,0,0,119,387,1,0,0,0,121,402,1,0,0,
        0,123,414,1,0,0,0,125,426,1,0,0,0,127,437,1,0,0,0,129,444,1,0,0,
        0,131,450,1,0,0,0,133,461,1,0,0,0,135,475,1,0,0,0,137,486,1,0,0,
        0,139,140,7,0,0,0,140,2,1,0,0,0,141,143,7,1,0,0,142,144,7,2,0,0,
        143,142,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,147,3,1,0,0,
        146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,
        149,4,1,0,0,0,150,151,5,92,0,0,151,152,9,0,0,0,152,6,1,0,0,0,153,
        154,8,3,0,0,154,8,1,0,0,0,155,159,3,67,33,0,156,159,3,69,34,0,157,
        159,3,71,35,0,158,155,1,0,0,0,158,156,1,0,0,0,158,157,1,0,0,0,159,
        10,1,0,0,0,160,161,5,105,0,0,161,162,5,110,0,0,162,163,5,116,0,0,
        163,12,1,0,0,0,164,165,5,102,0,0,165,166,5,108,0,0,166,167,5,111,
        0,0,167,168,5,97,0,0,168,169,5,116,0,0,169,14,1,0,0,0,170,171,5,
        115,0,0,171,172,5,116,0,0,172,173,5,114,0,0,173,174,5,105,0,0,174,
        175,5,110,0,0,175,176,5,103,0,0,176,16,1,0,0,0,177,178,5,98,0,0,
        178,179,5,111,0,0,179,180,5,111,0,0,180,181,5,108,0,0,181,182,5,
        101,0,0,182,183,5,97,0,0,183,184,5,110,0,0,184,18,1,0,0,0,185,186,
        5,99,0,0,186,187,5,111,0,0,187,188,5,110,0,0,188,189,5,115,0,0,189,
        190,5,116,0,0,190,20,1,0,0,0,191,192,5,118,0,0,192,193,5,97,0,0,
        193,194,5,114,0,0,194,22,1,0,0,0,195,196,5,114,0,0,196,197,5,101,
        0,0,197,198,5,116,0,0,198,199,5,117,0,0,199,200,5,114,0,0,200,201,
        5,110,0,0,201,24,1,0,0,0,202,203,5,116,0,0,203,204,5,121,0,0,204,
        205,5,112,0,0,205,206,5,101,0,0,206,26,1,0,0,0,207,208,5,102,0,0,
        208,209,5,117,0,0,209,210,5,110,0,0,210,211,5,99,0,0,211,28,1,0,
        0,0,212,213,5,115,0,0,213,214,5,116,0,0,214,215,5,114,0,0,215,216,
        5,117,0,0,216,217,5,99,0,0,217,218,5,116,0,0,218,30,1,0,0,0,219,
        220,5,105,0,0,220,221,5,110,0,0,221,222,5,116,0,0,222,223,5,101,
        0,0,223,224,5,114,0,0,224,225,5,102,0,0,225,226,5,97,0,0,226,227,
        5,99,0,0,227,228,5,101,0,0,228,32,1,0,0,0,229,230,5,105,0,0,230,
        231,5,102,0,0,231,34,1,0,0,0,232,233,5,101,0,0,233,234,5,108,0,0,
        234,235,5,115,0,0,235,236,5,101,0,0,236,36,1,0,0,0,237,238,5,102,
        0,0,238,239,5,111,0,0,239,240,5,114,0,0,240,38,1,0,0,0,241,242,5,
        99,0,0,242,243,5,111,0,0,243,244,5,110,0,0,244,245,5,116,0,0,245,
        246,5,105,0,0,246,247,5,110,0,0,247,248,5,117,0,0,248,249,5,101,
        0,0,249,40,1,0,0,0,250,251,5,98,0,0,251,252,5,114,0,0,252,253,5,
        101,0,0,253,254,5,97,0,0,254,255,5,107,0,0,255,42,1,0,0,0,256,257,
        5,114,0,0,257,258,5,97,0,0,258,259,5,110,0,0,259,260,5,103,0,0,260,
        261,5,101,0,0,261,44,1,0,0,0,262,263,5,43,0,0,263,46,1,0,0,0,264,
        265,5,45,0,0,265,48,1,0,0,0,266,267,5,42,0,0,267,50,1,0,0,0,268,
        269,5,47,0,0,269,52,1,0,0,0,270,271,5,37,0,0,271,54,1,0,0,0,272,
        273,5,61,0,0,273,274,5,61,0,0,274,56,1,0,0,0,275,276,5,33,0,0,276,
        277,5,61,0,0,277,58,1,0,0,0,278,279,5,60,0,0,279,60,1,0,0,0,280,
        281,5,60,0,0,281,282,5,61,0,0,282,62,1,0,0,0,283,284,5,62,0,0,284,
        64,1,0,0,0,285,286,5,62,0,0,286,287,5,61,0,0,287,66,1,0,0,0,288,
        289,5,38,0,0,289,290,5,38,0,0,290,68,1,0,0,0,291,292,5,124,0,0,292,
        293,5,124,0,0,293,70,1,0,0,0,294,295,5,33,0,0,295,72,1,0,0,0,296,
        297,5,61,0,0,297,74,1,0,0,0,298,299,5,58,0,0,299,300,5,61,0,0,300,
        76,1,0,0,0,301,302,5,43,0,0,302,303,5,61,0,0,303,78,1,0,0,0,304,
        305,5,45,0,0,305,306,5,61,0,0,306,80,1,0,0,0,307,308,5,42,0,0,308,
        309,5,61,0,0,309,82,1,0,0,0,310,311,5,47,0,0,311,312,5,61,0,0,312,
        84,1,0,0,0,313,314,5,37,0,0,314,315,5,61,0,0,315,86,1,0,0,0,316,
        317,5,46,0,0,317,88,1,0,0,0,318,319,5,44,0,0,319,90,1,0,0,0,320,
        321,5,58,0,0,321,92,1,0,0,0,322,323,5,59,0,0,323,94,1,0,0,0,324,
        325,5,40,0,0,325,96,1,0,0,0,326,327,5,41,0,0,327,98,1,0,0,0,328,
        329,5,91,0,0,329,100,1,0,0,0,330,331,5,93,0,0,331,102,1,0,0,0,332,
        333,5,123,0,0,333,104,1,0,0,0,334,335,5,125,0,0,335,106,1,0,0,0,
        336,337,5,110,0,0,337,338,5,105,0,0,338,339,5,108,0,0,339,108,1,
        0,0,0,340,341,5,116,0,0,341,342,5,114,0,0,342,343,5,117,0,0,343,
        344,5,101,0,0,344,110,1,0,0,0,345,346,5,102,0,0,346,347,5,97,0,0,
        347,348,5,108,0,0,348,349,5,115,0,0,349,350,5,101,0,0,350,112,1,
        0,0,0,351,360,5,48,0,0,352,356,7,4,0,0,353,355,3,1,0,0,354,353,1,
        0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,360,1,
        0,0,0,358,356,1,0,0,0,359,351,1,0,0,0,359,352,1,0,0,0,360,114,1,
        0,0,0,361,362,5,48,0,0,362,366,5,98,0,0,363,364,5,48,0,0,364,366,
        5,66,0,0,365,361,1,0,0,0,365,363,1,0,0,0,366,368,1,0,0,0,367,369,
        7,5,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,368,1,0,0,0,370,371,
        1,0,0,0,371,116,1,0,0,0,372,373,5,48,0,0,373,377,5,111,0,0,374,375,
        5,48,0,0,375,377,5,79,0,0,376,372,1,0,0,0,376,374,1,0,0,0,377,379,
        1,0,0,0,378,380,7,6,0,0,379,378,1,0,0,0,380,381,1,0,0,0,381,379,
        1,0,0,0,381,382,1,0,0,0,382,118,1,0,0,0,383,384,5,48,0,0,384,388,
        5,120,0,0,385,386,5,48,0,0,386,388,5,88,0,0,387,383,1,0,0,0,387,
        385,1,0,0,0,388,390,1,0,0,0,389,391,7,7,0,0,390,389,1,0,0,0,391,
        392,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,120,1,0,0,0,394,
        403,5,48,0,0,395,399,7,4,0,0,396,398,3,1,0,0,397,396,1,0,0,0,398,
        401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,403,1,0,0,0,401,
        399,1,0,0,0,402,394,1,0,0,0,402,395,1,0,0,0,403,404,1,0,0,0,404,
        408,5,46,0,0,405,407,3,1,0,0,406,405,1,0,0,0,407,410,1,0,0,0,408,
        406,1,0,0,0,408,409,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,411,
        413,3,3,1,0,412,411,1,0,0,0,412,413,1,0,0,0,413,122,1,0,0,0,414,
        419,5,34,0,0,415,418,3,7,3,0,416,418,3,5,2,0,417,415,1,0,0,0,417,
        416,1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,
        422,1,0,0,0,421,419,1,0,0,0,422,423,5,34,0,0,423,424,6,61,0,0,424,
        124,1,0,0,0,425,427,7,8,0,0,426,425,1,0,0,0,427,428,1,0,0,0,428,
        426,1,0,0,0,428,429,1,0,0,0,429,433,1,0,0,0,430,432,7,9,0,0,431,
        430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,
        126,1,0,0,0,435,433,1,0,0,0,436,438,7,10,0,0,437,436,1,0,0,0,438,
        439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,
        442,6,63,1,0,442,128,1,0,0,0,443,445,7,11,0,0,444,443,1,0,0,0,445,
        446,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,
        449,6,64,2,0,449,130,1,0,0,0,450,451,5,47,0,0,451,452,5,47,0,0,452,
        456,1,0,0,0,453,455,8,10,0,0,454,453,1,0,0,0,455,458,1,0,0,0,456,
        454,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,456,1,0,0,0,459,
        460,6,65,2,0,460,132,1,0,0,0,461,462,5,47,0,0,462,463,5,42,0,0,463,
        467,1,0,0,0,464,466,9,0,0,0,465,464,1,0,0,0,466,469,1,0,0,0,467,
        468,1,0,0,0,467,465,1,0,0,0,468,470,1,0,0,0,469,467,1,0,0,0,470,
        471,5,42,0,0,471,472,5,47,0,0,472,473,1,0,0,0,473,474,6,66,2,0,474,
        134,1,0,0,0,475,480,5,34,0,0,476,479,3,7,3,0,477,479,3,5,2,0,478,
        476,1,0,0,0,478,477,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,
        481,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,483,485,7,12,0,0,484,
        483,1,0,0,0,485,136,1,0,0,0,486,487,9,0,0,0,487,138,1,0,0,0,27,0,
        143,148,158,356,359,365,370,376,381,387,392,399,402,408,412,417,
        419,428,433,439,446,456,467,478,480,484,3,1,61,0,1,63,1,6,0,0
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Key_type_int = 1
    Key_type_float = 2
    Key_type_string = 3
    Key_type_boolean = 4
    Key_decl_const = 5
    Key_decl_var = 6
    Key_return = 7
    Key_type = 8
    Key_func = 9
    Key_struct = 10
    Key_interface = 11
    Key_if = 12
    Key_else = 13
    Key_loop_for = 14
    Key_loop_continue = 15
    Key_loop_break = 16
    Key_range = 17
    Ope_plus = 18
    Ope_minus = 19
    Ope_multi = 20
    Ope_div = 21
    Ope_mod = 22
    Ope_equal = 23
    Ope_nequal = 24
    Ope_let = 25
    Ope_leq = 26
    Ope_get = 27
    Ope_geq = 28
    Ope_and = 29
    Ope_or = 30
    Ope_not = 31
    Ope_assign = 32
    Ope_init = 33
    Ope_assign_plus = 34
    Ope_assign_minus = 35
    Ope_assign_multi = 36
    Ope_assign_div = 37
    Ope_assign_mod = 38
    Ope_select = 39
    Comma = 40
    Colon = 41
    Semicolon = 42
    Lparen = 43
    Rparen = 44
    Lsquare = 45
    Rsquare = 46
    Lcurly = 47
    Rcurly = 48
    Literal_nil = 49
    Literal_true = 50
    Literal_false = 51
    Literal_dec = 52
    Literal_bin = 53
    Literal_oct = 54
    Literal_hex = 55
    Literal_float = 56
    Literal_string = 57
    Identifier = 58
    NL = 59
    WS = 60
    SL_COMMENT = 61
    ML_COMMENT = 62
    UNCLOSE_STRING = 63
    ERROR_CHAR = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'float'", "'string'", "'boolean'", "'const'", "'var'", 
            "'return'", "'type'", "'func'", "'struct'", "'interface'", "'if'", 
            "'else'", "'for'", "'continue'", "'break'", "'range'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", 
            "'>='", "'&&'", "'||'", "'!'", "'='", "':='", "'+='", "'-='", 
            "'*='", "'/='", "'%='", "'.'", "','", "':'", "';'", "'('", "')'", 
            "'['", "']'", "'{'", "'}'", "'nil'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "Key_type_int", "Key_type_float", "Key_type_string", "Key_type_boolean", 
            "Key_decl_const", "Key_decl_var", "Key_return", "Key_type", 
            "Key_func", "Key_struct", "Key_interface", "Key_if", "Key_else", 
            "Key_loop_for", "Key_loop_continue", "Key_loop_break", "Key_range", 
            "Ope_plus", "Ope_minus", "Ope_multi", "Ope_div", "Ope_mod", 
            "Ope_equal", "Ope_nequal", "Ope_let", "Ope_leq", "Ope_get", 
            "Ope_geq", "Ope_and", "Ope_or", "Ope_not", "Ope_assign", "Ope_init", 
            "Ope_assign_plus", "Ope_assign_minus", "Ope_assign_multi", "Ope_assign_div", 
            "Ope_assign_mod", "Ope_select", "Comma", "Colon", "Semicolon", 
            "Lparen", "Rparen", "Lsquare", "Rsquare", "Lcurly", "Rcurly", 
            "Literal_nil", "Literal_true", "Literal_false", "Literal_dec", 
            "Literal_bin", "Literal_oct", "Literal_hex", "Literal_float", 
            "Literal_string", "Identifier", "NL", "WS", "SL_COMMENT", "ML_COMMENT", 
            "UNCLOSE_STRING", "ERROR_CHAR" ]

    ruleNames = [ "Digit", "Exp", "Escape", "Char", "Ope_for_boolean", "Key_type_int", 
                  "Key_type_float", "Key_type_string", "Key_type_boolean", 
                  "Key_decl_const", "Key_decl_var", "Key_return", "Key_type", 
                  "Key_func", "Key_struct", "Key_interface", "Key_if", "Key_else", 
                  "Key_loop_for", "Key_loop_continue", "Key_loop_break", 
                  "Key_range", "Ope_plus", "Ope_minus", "Ope_multi", "Ope_div", 
                  "Ope_mod", "Ope_equal", "Ope_nequal", "Ope_let", "Ope_leq", 
                  "Ope_get", "Ope_geq", "Ope_and", "Ope_or", "Ope_not", 
                  "Ope_assign", "Ope_init", "Ope_assign_plus", "Ope_assign_minus", 
                  "Ope_assign_multi", "Ope_assign_div", "Ope_assign_mod", 
                  "Ope_select", "Comma", "Colon", "Semicolon", "Lparen", 
                  "Rparen", "Lsquare", "Rsquare", "Lcurly", "Rcurly", "Literal_nil", 
                  "Literal_true", "Literal_false", "Literal_dec", "Literal_bin", 
                  "Literal_oct", "Literal_hex", "Literal_float", "Literal_string", 
                  "Identifier", "NL", "WS", "SL_COMMENT", "ML_COMMENT", 
                  "UNCLOSE_STRING", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def __init__(self, input=None, output:TextIO = sys.stdout):
            super().__init__(input, output)
            self.checkVersion("4.9.2")
            self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
            self._actions = None
            self._predicates = None
            self.last_token_type = None

    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit()
            if result.text[-1] == '\n' or result.text[-1] == '\r':
                result.text = result.text[0:-1]
            raise UncloseString(result.text[0:])
        elif tk == self.ERROR_CHAR:
            result = super().emit()
            raise ErrorToken(self.text)
        else:
            self.last_token_type = tk
            return super().emit()

    def check_previous_token_for_newline_token(self):
        return self.last_token_type in {
            self.Identifier,
            self.Literal_nil,
            self.Literal_true,
            self.Literal_false,
            self.Literal_dec,
            self.Literal_oct,
            self.Literal_bin,
            self.Literal_hex,
            self.Literal_float,
            self.Literal_string,
            self.Key_type_int,
            self.Key_type_float,
            self.Key_type_string,
            self.Key_type_boolean,
            self.Key_return,
            self.Key_loop_continue,
            self.Key_loop_break,
            self.Rparen,
            self.Rsquare,
            self.Rcurly
        }

    def replace_newline_char(self):
        if (self.check_previous_token_for_newline_token()):
            self.text = ';'
            self.type = self.Semicolon
        else:
            self.skip()

    def check_illegal_escape(self):
        str = self.text
        i = 0
        while i < len(str):
            if str[i] == '\\' and i != len(str) - 1 and str[i+1] == '\\':
                i += 2
            elif str[i] == '\\' and i != len(str) - 1 and not (str[i + 1] in {'t', 'r', 'n'}):
                raise IllegalEscape(str[:i+2])
            else:
                i += 1


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.Literal_string_action 
            actions[63] = self.NL_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def Literal_string_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.check_illegal_escape()
     

    def NL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             self.replace_newline_char() 
     


